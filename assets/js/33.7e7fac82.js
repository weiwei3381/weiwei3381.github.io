(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{399:function(t,e,a){"use strict";a.r(e);var s=a(19),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-使用攻略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-使用攻略"}},[t._v("#")]),t._v(" git 使用攻略")]),t._v(" "),a("h2",{attrs:{id:"git-命令速查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-命令速查"}},[t._v("#")]),t._v(" git 命令速查")]),t._v(" "),a("h3",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),a("p",[t._v("下面按流程列举了 git 常用命令：")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git init //初始化git仓库\ngit add . // 添加所有文件\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first commit"')]),t._v("  // 提交文件\ngit remote add origin [远程仓库地址] //链接远程仓库，创建主分支\ngit pull origin master // 拉取远程仓库到本地主分支\ngit push -u origin master  // 把本地仓库的文件推送到远程仓库\n// 如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机(即origin)\n// 这样后面就可以不加任何参数使用git push\n")])])]),a("h3",{attrs:{id:"git-创建-ssh-key-进行远程提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-创建-ssh-key-进行远程提交"}},[t._v("#")]),t._v(" git 创建 ssh key 进行远程提交")]),t._v(" "),a("h4",{attrs:{id:"创建-github-的-ssh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-github-的-ssh"}},[t._v("#")]),t._v(" 创建 Github 的 SSH")]),t._v(" "),a("ol",[a("li",[t._v("创建 SSH Key。Windows 下打开"),a("strong",[t._v("Git Bash")]),t._v("，创建 SSH Key："),a("br"),t._v(" "),a("code",[t._v('ssh-keygen -t rsa -C "youremail@example.com"')]),t._v(",例如我的 git 邮箱是"),a("strong",[t._v("example@live.com")]),t._v("，则输入"),a("code",[t._v('ssh-keygen -t rsa -C "example@live.com"')]),t._v("，一切顺利的话，可以在 C 盘的用户目录里找到"),a("code",[t._v(".ssh")]),t._v("目录，里面有"),a("code",[t._v("id_rsa")]),t._v("和"),a("code",[t._v("id_rsa.pub")]),t._v("两个文件，这两个就是 SSH Key 的秘钥对，"),a("code",[t._v("id_rsa")]),t._v("是私钥，不能泄露出去，"),a("code",[t._v("id_rsa.pub")]),t._v("是公钥，可以放心地告诉任何人。")]),t._v(" "),a("li",[t._v("登陆 GitHub，打开“Account settings”，“SSH Keys”页面，然后点“Add SSH Key”，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。")])]),t._v(" "),a("h4",{attrs:{id:"处理码云和-github-同时配置的冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理码云和-github-同时配置的冲突"}},[t._v("#")]),t._v(" 处理码云和 github 同时配置的冲突")]),t._v(" "),a("p",[t._v("如果需要在 Gitee(码云)、Github 上同时配置 ssh key，并解决冲突：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("使用"),a("code",[t._v("-f")]),t._v("参数生成不同的 rsa 文件：")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("ssh-keygen -t rsa -C "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxxxxxx@qq.com"')]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github_id_rsa"')]),t._v("\nssh-keygen -t rsa -C "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxxxxxx@qq.com"')]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gitee_id_rsa"')]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("把各自的 public 文件内容(即带有 pub 后缀文件)分别复制到 gitee 和 github 上。")])]),t._v(" "),a("li",[a("p",[t._v("在"),a("code",[t._v(".ssh")]),t._v("文件夹中创建 config 文件解决 ssh 冲突：")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gitee")]),t._v("\nHost gitee.com\nHostName gitee.com\nPreferredAuthentications publickey\nIdentityFile C:/Users/wowbat/.ssh/gitee_id_rsa\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# github")]),t._v("\nHost github.com\nHostName github.com\nPreferredAuthentications publickey\nIdentityFile C:/Users/wowbat/.ssh/id_rsa\n\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"新建代码库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建代码库"}},[t._v("#")]),t._v(" 新建代码库")]),t._v(" "),a("ul",[a("li",[t._v("🍞 在当前目录初始化 git 仓库: "),a("code",[t._v("git init")])]),t._v(" "),a("li",[t._v("新建项目，并将其初始化为 git 仓库: "),a("code",[t._v("git init [仓库名称]")])]),t._v(" "),a("li",[t._v("🍞 新建项目文件夹，并从网址下载一个项目及其整个代码历史: "),a("code",[t._v("git clone [项目网址]")])])]),t._v(" "),a("h3",{attrs:{id:"git-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-配置"}},[t._v("#")]),t._v(" git 配置")]),t._v(" "),a("ul",[a("li",[t._v("显示当前 git 配置: "),a("code",[t._v("git config --list")])]),t._v(" "),a("li",[t._v("设置提交代码时的用户名:"),a("code",[t._v('git config [--global] user.name "[用户名]"')])]),t._v(" "),a("li",[t._v("设置提交代码时的电子邮件:"),a("code",[t._v('git config [--global] user.email "[email地址]"')])])]),t._v(" "),a("h3",{attrs:{id:"增加-修改-提交文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增加-修改-提交文件"}},[t._v("#")]),t._v(" 增加/修改/提交文件")]),t._v(" "),a("ul",[a("li",[t._v("🍞 将文件夹下所有文件添加到仓库："),a("code",[t._v("git add .")])]),t._v(" "),a("li",[t._v("🍞 将所有添加后的文件提交到仓库："),a("code",[t._v('git commit -m "[注释]"')])]),t._v(" "),a("li",[t._v("添加所有追踪的文件到暂存区并提交: "),a("code",[t._v('git commit -a -m "[注释]"')]),t._v("，🔥tips:对于新增加的文件无效果")]),t._v(" "),a("li",[t._v("如果代码没有任何新变化，则用新的信息来改写上一次 commit 的提交信息: "),a("code",[t._v('git commit --amend -m "[信息]"')])])]),t._v(" "),a("h3",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("ul",[a("li",[t._v("显示所有本地分支: "),a("code",[t._v("git branch")])]),t._v(" "),a("li",[t._v("列入所有本地和远程分支: "),a("code",[t._v("git branch -a")])]),t._v(" "),a("li",[t._v("新建一个分支，但依然停留在当前分支: "),a("code",[t._v("git branch [分支名称]")])]),t._v(" "),a("li",[t._v("🍞 新建一个分支，并切换到该分支: "),a("code",[t._v("git checkout -b [分支名称]")])]),t._v(" "),a("li",[t._v("切换到指定分支，并更新工作区: "),a("code",[t._v("git checkout [分支名称]")])]),t._v(" "),a("li",[t._v("合并指定分支到当前分支: "),a("code",[t._v("git merge [分支名称]")])])]),t._v(" "),a("h3",{attrs:{id:"标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" 标签")]),t._v(" "),a("p",[t._v("提交之后可以使用"),a("code",[t._v("git tag [标签名]")]),a("strong",[t._v("创建标签")]),t._v("，然后使用"),a("code",[t._v("git show [标签名]")]),t._v("可以显示那次提交信息，显示之后按"),a("code",[t._v("q")]),t._v("退出。")]),t._v(" "),a("p",[t._v("可以对"),a("strong",[t._v("过去的提交打标签")]),t._v("，使用"),a("code",[t._v("git log --pretty=oneline")]),t._v("查看所有提交历史，然后使用"),a("code",[t._v("git tag -a [标签名，例如v1.2] [hash版本，例如9fceb02]")]),t._v("给历史提交打标签")]),t._v(" "),a("p",[a("code",[t._v("git tag")]),t._v("能够"),a("strong",[t._v("查看所有标签名")])]),t._v(" "),a("p",[t._v("要"),a("strong",[t._v("删除")]),t._v("本地仓库上的标签，可以使用命令 "),a("code",[t._v("git tag -d [标签名]")])]),t._v(" "),a("p",[t._v("如果你想"),a("strong",[t._v("查看某个标签所指向的文件版本")]),t._v("，可以使用 "),a("code",[t._v("git checkout [标签名]")])]),t._v(" "),a("p",[t._v("默认情况下，"),a("code",[t._v("git push")]),t._v(" 命令并"),a("strong",[t._v("不会")]),t._v("传送标签到远程仓库服务器上。在创建完标签后你必须显式地推送标签到共享服务器上，"),a("code",[t._v("git push origin [标签名]")]),t._v("，如果想要一次性推送很多标签，也可以使用带有"),a("code",[t._v("--tags")]),t._v("选项的 "),a("code",[t._v("git push")]),t._v(" 命令，即"),a("code",[t._v("git push origin --tags")])]),t._v(" "),a("h3",{attrs:{id:"rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[t._v("#")]),t._v(" rebase")]),t._v(" "),a("p",[t._v("第二种合并分支的方法是 "),a("code",[t._v("git rebase")]),t._v("。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。")]),t._v(" "),a("p",[t._v("Rebase 的优势就是可以"),a("strong",[t._v("创造更线性的提交历史")]),t._v("，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。")]),t._v(" "),a("p",[t._v("我们想要把 bugFix 分支里的工作直接移到 main 分支上。移动以后会使得两个分支的功能看起来像是按顺序开发，但实际上它们是并行开发的。注意当前所在的分支是 bugFix（星号标识的是当前分支），使用 "),a("code",[t._v("git rebase main")]),t._v(" 实现此目标。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.imgdb.cn/item/618fc2ff2ab3f51d916c7810.jpg",alt:"git rebase main"}})]),t._v(" "),a("p",[t._v("现在 bugFix 分支上的工作在 main 的最顶端，同时我们也得到了一个更线性的提交序列。"),a("strong",[t._v("注意")]),t._v("：提交记录"),a("code",[t._v("C3")]),t._v("依然存在（树上那个半透明的节点），而 "),a("code",[t._v("C3'")]),t._v(" 是我们 Rebase 到 main 分支上的"),a("code",[t._v("C3")]),t._v("的副本。")]),t._v(" "),a("p",[t._v("然后还需要切换到"),a("code",[t._v("main")]),t._v("分支上，使用"),a("code",[t._v("git checkout main")]),t._v("。然后使用"),a("code",[t._v("git rebase bugFix")]),t._v("把它rebase到"),a("code",[t._v("bugFix")]),t._v("分支上。")]),t._v(" "),a("h3",{attrs:{id:"在提交树上移动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在提交树上移动"}},[t._v("#")]),t._v(" 在提交树上移动")]),t._v(" "),a("p",[t._v("我们首先看一下 “HEAD”。 HEAD 是一个对当前检出记录的符号引用，也就是指向你正在其基础上进行工作的提交记录。")]),t._v(" "),a("p",[t._v("HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("git checkout [提交记录的hash]")]),t._v("可以移动HEAD。不过通过指定提交记录哈希值的方式在 Git 中移动不太方便，因为hash值通常很长，所以 Git 引入了相对引用。")]),t._v(" "),a("p",[t._v("使用相对引用的话，你就可以从一个易于记忆的地方（比如 bugFix 分支或 HEAD）开始计算。相对引用非常给力，这里我介绍两个简单的用法：")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("^")]),t._v(" 向上移动 1 个提交记录")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("~<num>")]),t._v(" 向上移动多个提交记录，如"),a("code",[t._v("~3")])])]),t._v(" "),a("p",[t._v("操作符 (^)，把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。所以"),a("code",[t._v("main^")]),t._v("相当于“main 的父节点”。"),a("code",[t._v("main^^")]),t._v("是 main 的第二个父节点使用"),a("code",[t._v("git checkout main^")]),t._v("运行。同理，也可以将 HEAD 作为相对引用的参照。")]),t._v(" "),a("p",[t._v("如果你想在提交树中向上移动很多步的话，敲那么多"),a("code",[t._v("^")]),t._v("貌似也挺烦人的，Git 当然也考虑到了这一点，于是又引入了操作符"),a("code",[t._v("~")]),t._v("。该操作符后面可以跟一个数字（可选，不跟数字时与 ^ 相同，向上移动一次），指定向上移动多少次。"),a("code",[t._v("git checkout HEAD~4")]),t._v("表示HEAD向上移动4次。")]),t._v(" "),a("p",[a("strong",[t._v("强制修改分支位置")]),t._v("，使用相对引用最多的就是移动分支。可以直接使用"),a("code",[t._v("-f")]),t._v("选项让分支指向另一个提交。例如"),a("code",[t._v("git branch -f main HEAD~3")]),t._v("命令会将 main 分支强制指向 HEAD 的第 3 级父提交。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.imgdb.cn/item/618fc8d22ab3f51d916e6198.jpg",alt:"git branch -f main HEAD~3"}})]),t._v(" "),a("h3",{attrs:{id:"撤销变更"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销变更"}},[t._v("#")]),t._v(" 撤销变更")]),t._v(" "),a("p",[t._v("在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。")]),t._v(" "),a("p",[t._v("主要有两种方法用来撤销变更，一是"),a("code",[t._v("git reset")]),t._v("，还有就是"),a("code",[t._v("git revert")]),t._v("。接下来咱们逐个进行讲解。")]),t._v(" "),a("p",[a("strong",[t._v("Git Reset")]),t._v("：通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。git reset 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。")]),t._v(" "),a("p",[t._v("例如"),a("code",[t._v("git reset HEAD~1")]),t._v(",Git 把 main 分支移回到 C1；现在我们的本地代码库根本就不知道有 C2 这个提交了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.imgdb.cn/item/618fcc602ab3f51d916f836d.jpg",alt:"git reset HEAD~1"}})]),t._v(" "),a("p",[a("strong",[t._v("Git Revert")]),t._v("：虽然在你的本地分支中使用 git reset 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的哦！为了撤销更改并分享给别人，我们需要使用 git revert。")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("git revert HEAD")]),t._v("后，在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录"),a("code",[t._v("C2'")]),t._v(" 引入了更改，这些更改刚好是用来撤销"),a("code",[t._v("C2")]),t._v("这个提交的。也就是说"),a("code",[t._v("C2'")]),t._v(" 的状态与 "),a("code",[t._v("C1")]),t._v("是相同的。revert 之后就可以把你的更改推送到远程仓库与别人分享啦。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.imgdb.cn/item/618fcd3f2ab3f51d916fc8d8.jpg",alt:"git revert HEAD"}})]),t._v(" "),a("h3",{attrs:{id:"查看信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[t._v("#")]),t._v(" 查看信息")]),t._v(" "),a("ul",[a("li",[t._v("查看变更内容: "),a("code",[t._v("git diff")]),t._v("，使用"),a("strong",[t._v("pagedown")]),t._v("按钮翻页，使用"),a("strong",[t._v("q")]),t._v("再按"),a("strong",[t._v("enter")]),t._v("退出查看")]),t._v(" "),a("li",[t._v("🍞 显示所有变更的文件: "),a("code",[t._v("git status")])]),t._v(" "),a("li",[t._v("单行模式查看提交日记: "),a("code",[t._v("git log --pretty --oneline")])]),t._v(" "),a("li",[t._v("显示过去的 5 次提交: "),a("code",[t._v("git log -5 --pretty --oneline")])]),t._v(" "),a("li",[t._v("显示今天写了多少代码: "),a("code",[t._v('git diff --shortstat "@{0 day ago}"')])]),t._v(" "),a("li",[t._v("显示当前分支最近的几次提交: "),a("code",[t._v("git reflog")])])]),t._v(" "),a("h3",{attrs:{id:"远程操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程操作"}},[t._v("#")]),t._v(" 远程操作")]),t._v(" "),a("ul",[a("li",[t._v("显示所有远程仓库: "),a("code",[t._v("git remote -v")])]),t._v(" "),a("li",[t._v("取回远程仓库的变化，并与本地分支合并: "),a("code",[t._v("git pull [远程仓库名称,一般用origin] [分支名称]")])]),t._v(" "),a("li",[t._v("增加一个新的远程仓库，并命名: "),a("code",[t._v("git remote add [远程仓库名称,一般用origin] [远程url]")])]),t._v(" "),a("li",[t._v("上传本地指定分支到远程仓库: "),a("code",[t._v("git push [远程仓库名] [本地分支名]")])]),t._v(" "),a("li",[t._v("强行推送当前分支到远程仓库，即使有冲突: "),a("code",[t._v("git push [远程仓库名] --force")])])]),t._v(" "),a("h3",{attrs:{id:"撤销"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[t._v("#")]),t._v(" 撤销")]),t._v(" "),a("h2",{attrs:{id:"pandoc-配合-git-实现文档版本化管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pandoc-配合-git-实现文档版本化管理"}},[t._v("#")]),t._v(" pandoc 配合 git 实现文档版本化管理")]),t._v(" "),a("blockquote",[a("p",[t._v("git 可以进行版本管理，但是只能针对纯文本，对于 docx 等二进制文件无法准确查看每次修改位置，那么如果用 markdown 文本文件管理文件内容，使用某种转换工具将 markdown 文件转换，就可以实现文档版本化管理。"),a("a",{attrs:{href:"https://pandoc.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("pandoc"),a("OutboundLink")],1),t._v("是一种将各类文件互相转换的工具，例如 docx、html、markdown、epub、pdf 等，在一些 markdown 写作工具中，它常被用作导出工具的一种，项目源代码托管于"),a("a",{attrs:{href:"https://github.com/jgm/pandoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("github"),a("OutboundLink")],1),t._v("，可以在"),a("a",{attrs:{href:"https://github.com/jgm/pandoc/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("此处"),a("OutboundLink")],1),t._v("下载最新版本，2.1 版本的 win_x64 的安装文件"),a("a",{attrs:{href:"https://wws.lanzous.com/i0lOmgja7na",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载"),a("OutboundLink")],1),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"pandoc-基本命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pandoc-基本命令"}},[t._v("#")]),t._v(" pandoc 基本命令")]),t._v(" "),a("p",[t._v("pandoc 是一个命令行工具，下面是常用的命令，需要注意的是，如果使用 cmd，那么在使用 pandoc 之前键入"),a("code",[t._v("chcp 65001")]),t._v("，将编码设置为 UTF-8，否则导出的文件会出现错误。")]),t._v(" "),a("p",[t._v("pandoc 的基本操作"),a("code",[t._v("pandoc <files> <options>")]),t._v("，其中 "),a("code",[t._v("<files>")]),t._v(" 为输入的内容，其输入即可以来自文件，也可以来自标准输入甚至网页链接。而 "),a("code",[t._v("<options>")]),t._v(" 为参数选项。主要的参数选项有：")]),t._v(" "),a("ul",[a("li",[t._v("-o [file]：指定输出文件，该项缺省时，将输出到标准输出；")]),t._v(" "),a("li",[t._v("--highlight-style [style]：设置代码高亮主题，默认为 pygments；")]),t._v(" "),a("li",[t._v("-s：生成有头尾的独立文件（HTML，LaTeX，TEI 或 RTF）；")]),t._v(" "),a("li",[t._v("-S：聪明模式，根据文件判断其格式；")]),t._v(" "),a("li",[t._v("--self-contained：生成自包含的文件，仅在输出 HTML 文档时有效；")]),t._v(" "),a("li",[t._v("--verbose：开启 Verbose 模式，用于 Debug；")]),t._v(" "),a("li",[t._v("--list-input-formats：列出支持的输入格式；")]),t._v(" "),a("li",[t._v("--list-output-formats：列出支持的输出格式；")]),t._v(" "),a("li",[t._v("--list-extensions：列出支持的 Markdown 扩展方案；")]),t._v(" "),a("li",[t._v("--list-highlight-languages：列出支持代码高亮的编程语言；")]),t._v(" "),a("li",[t._v("--list-highlight-styles：列出支持的代码高亮主题；")]),t._v(" "),a("li",[t._v("-v、--version：显示程序的版本号；")]),t._v(" "),a("li",[t._v("-h、--help：显示程序的帮助信息。")])]),t._v(" "),a("p",[t._v("常用的转换命令如下：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将demo.md转换为demo.html")]),t._v("\npandoc demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("md "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用自定义css样式，并将外部文件嵌入到 HTML 文档中，生成一个自包含的独立HTML文件")]),t._v("\npandoc demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("md "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("contained "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("c style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("css "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将demo.md文件转换为 docx 格式")]),t._v("\npandoc demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("md "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("docx\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下面的命令将 HTML 网页转换为 docx 格式")]),t._v("\npandoc http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v("weiwei3381"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("blogs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("general"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("git"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o this_page"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("docx\n")])])]),a("h3",{attrs:{id:"将-md-文件转换为公文格式-word"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将-md-文件转换为公文格式-word"}},[t._v("#")]),t._v(" 将 md 文件转换为公文格式 word")]),t._v(" "),a("p",[t._v("（一）进入 cmd 页面，输入"),a("code",[t._v("chcp 65001")]),t._v("，将编码设置为 UTF-8，使用下面命令查看默认的 word 模板，并将其导出到当前文件夹的 custom-reference.docx 中：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("pandoc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("default"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("file")]),t._v(" reference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("docx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" custom"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("reference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("docx\n")])])]),a("p",[t._v("（二）修改"),a("code",[t._v("custom-reference.docx")]),t._v("格式，将其改为公文模板，这里已经修改好的公文模板"),a("code",[t._v("reference.docx")]),a("a",{attrs:{href:t.$withBase("/reference.docx")}},[t._v("格式文件")]),t._v("下载。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("有些格式不是默认显示的，所以需要在 word 的样式栏中，点击右下角的箭头，展开全部样式才能找到，例如"),a("code",[t._v("图片")]),t._v("、"),a("code",[t._v("图注")]),t._v("、"),a("code",[t._v("源代码")]),t._v("等。")])]),t._v(" "),a("p",[t._v("（三）将公文模板放到 pandoc 的用户数据目录，使用"),a("code",[t._v("pandoc -v")]),t._v("查看目录的位置。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看pandoc的版本信息")]),t._v("\npandoc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出中能看到默认的用户数据目录，word模板命名为reference.docx放到用户数据目录中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Default user data directory: C:\\Users\\weiwe\\AppData\\Roaming\\pandoc")]),t._v("\n")])])]),a("p",[t._v("我自己电脑的位置是"),a("code",[t._v("C:\\Users\\weiwe\\AppData\\Roaming\\pandoc")]),t._v("，如果"),a("code",[t._v("pandoc")]),t._v("目录不存在，可以手动创建，然后将模板格式改为"),a("code",[t._v("reference.docx")]),t._v("名称放到该位置，然后使用"),a("code",[t._v("pandoc [目标文件.md] -o [转换后文件.docx]")])])])}),[],!1,null,null,null);e.default=v.exports}}]);